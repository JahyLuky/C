Úkolem je realizovat funkci (ne celý program, pouze funkci), která bude počítat číselné palindromy.

Palindrom je řetězec, který při čtení zleva doprava je stejný jako při čtení zprava doleva. Příkladem je slovo "oko". Číslo může být také palindromem, například číslo 181 je palindrom. U čísel je důležité, v jaké číselné soustavě je zapíšeme. Například číslo 17 (dec) není v desítkové soustavě palindrom, ale ve dvojkove soustavě je, protože 17 (dec) = 10001 (bin).

Úkolem je realizovat funkci, která bude hledat nejbližší větší číslo, které je v zadané číselné soustavě palindrom. Funkce bude mít rozhraní:

int nextPalindrome ( unsigned long long from, 
                     int radix,
                     unsigned long long * next );
from
určuje od kterého čísla hledáme palindrom. Hledáme číslo-palindrom, které je větší než toto from. Tedy pokud samotné from je palindrom, bude vráceno další větší číslo-palindrom.
radix
určuje v jaké číselné soustavě má být nalezené číslo palindromem. Hodnota radix musí být v rozmezí 2 až 36 (včetně).
next
je výstupním parametrem, kam funkce umístí nalezené číslo-palindrom. Pokud funkce neuspěje (viz níže), pak výstupní parametr ponechá beze změny.
návratová hodnota
indikuje úspěch volání (hodnota 1) nebo neúspěch (hodnota 0). Neúspěch nastane, pokud je zadaná neplatná číselná soustava (radix není v intervalu 2 až 36 včetně) nebo pokud nelze najít palindrom větší než from (nevejde se do rozsahu datového typu unsigned long long).
Odevzdávejte zdrojový soubor, který obsahuje implementaci požadované funkce nextPalindrome. Do zdrojového souboru přidejte i další Vaše podpůrné funkce, které jsou z nextPalindrome volané. Funkce bude volaná z testovacího prostředí, je proto důležité přesně dodržet zadané rozhraní funkce. Za základ pro implementaci použijte kód z přiloženého souboru. V kódu chybí vyplnit funkci nextPalindrome (a případné další podpůrné funkce). Ukázka obsahuje testovací funkci main, uvedené hodnoty jsou použité při základním testu. Všimněte si, že vkládání hlavičkových souborů a funkce main jsou zabalené v bloku podmíněného překladu (#ifdef/#endif). Prosím, ponechte bloky podmíněného překladu i v odevzdávaném zdrojovém souboru. Podmíněný překlad Vám zjednoduší práci. Při kompilaci na Vašem počítači můžete program normálně spouštět a testovat. Při kompilaci na Progtestu funkce main a vkládání hlavičkových souborů "zmizí", tedy nebude kolidovat s hlavičkovými soubory a funkcí main testovacího prostředí.

Váš program bude spouštěn v omezeném testovacím prostředí. Je omezen dobou běhu (limit je vidět v logu referenčního řešení) a dále je omezena i velikost dostupné paměti. Časové limity jsou nastavené tak, aby rozumná implementace naivního algoritmu prošla všemi povinnými a nepovinnými testy. Řešení fungující v povinných a nepovinných testech může získat nominálních 100% bodů. Bonusový test vyžaduje časově efektivní výpočet i pro velké hodnoty from.

Nápověda:
Stáhněte si přiložený archiv, rozbalte si jej a použijte rozbalený soubor jako základ Vašeho řešení.
Do funkce main si můžete doplnit i další Vaše testy, případně ji můžete libovolně změnit. Důležité je zachovat podmíněný překlad.
Test opisování kontroluje celý odevzdaný soubor včetně případných Vámi dodaných testů. Testy z přiložené ukázky za plagiát považovat nebudeme.
V bonusovém testu jsou používaná velká čísla, kde rozsah datového typu int nepostačuje. Proto má funkce parametrem unsigned long long, který již stačí.